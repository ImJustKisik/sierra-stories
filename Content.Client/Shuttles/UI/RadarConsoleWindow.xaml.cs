using Content.Client.Shuttles.BUI;
using System;
using System.Collections.Generic;
using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Collections;
using Robust.Shared.GameObjects;
using Robust.Shared.Localization;

using RangeControl = Robust.Client.UserInterface.Controls.Range;
using ButtonEventArgs = Robust.Client.UserInterface.Controls.BaseButton.ButtonEventArgs;
using static Content.Client.Shuttles.UI.AdvancedShuttleNavControl;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class RadarConsoleWindow : FancyWindow,
    IComputerWindow<NavInterfaceState>
{
    private ShuttleNavControl? _standardControl;
    private AdvancedShuttleNavControl? _advancedControl;
    private BaseShuttleControl? _activeControl;

    private readonly Dictionary<EntityUid, ItemList.Item> _targetItems = new();
    private readonly List<ItemList.Item> _itemBuffer = new();
    private readonly List<(EntityUid Id, AdvancedShuttleNavControl.TargetInfo Info)> _targetBuffer = new();

    private bool _handlingSelection;
    private bool _updatingBeamSpeed;
    private bool _updatingMode;
    private bool _updatingSectorCenter;
    private bool _updatingEmission;
    private readonly ButtonGroup _emissionButtonGroup = new ButtonGroup(isNoneSetAllowed: false);
    private readonly ButtonGroup _modeButtonGroup = new ButtonGroup(isNoneSetAllowed: false);

    private static readonly Comparison<ItemList.Item> ItemComparer = (a, b) =>
    {
        var uidA = a.Metadata is EntityUid entityA ? entityA : EntityUid.Invalid;
        var uidB = b.Metadata is EntityUid entityB ? entityB : EntityUid.Invalid;
        return uidA.CompareTo(uidB);
    };

    public RadarConsoleBoundUserInterface? Interface { get; set; }

    public RadarConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        TargetList.OnItemSelected += OnTargetSelected;
        TargetList.OnItemDeselected += OnTargetDeselected;
        BeamSpeedSlider.OnValueChanged += OnBeamSpeedChanged;
        UpdateBeamSpeedLabel(BeamSpeedSlider.Value);

        EmissionActiveButton.Group = _emissionButtonGroup;
        EmissionPassiveButton.Group = _emissionButtonGroup;
        EmissionActiveButton.OnPressed += OnEmissionActivePressed;
        EmissionPassiveButton.OnPressed += OnEmissionPassivePressed;
        EmissionActiveButton.Pressed = true;

        ModeOverviewButton.Group = _modeButtonGroup;
        ModeSectorButton.Group = _modeButtonGroup;
        ModeOverviewButton.OnPressed += OnModeOverviewPressed;
        ModeSectorButton.OnPressed += OnModeSectorPressed;
        ModeOverviewButton.Pressed = true;

        SectorCenterSpinBox.SetButtons(new List<int> { -15, -5, -1 }, new List<int> { 1, 5, 15 });
        SectorCenterSpinBox.ValueChanged += OnSectorCenterChanged;
        UpdateSectorCenterValueLabel(SectorCenterSpinBox.Value);
        UpdateStatusSummary();
        LinkEmitterButton.OnPressed += OnLinkEmitterPressed;
    }

    public void UpdateState(NavInterfaceState scc)
    {
        if (scc.IsAdvanced)
        {
            ShowAdvanced();
        }
        else
        {
            ShowStandard();
        }

        switch (_activeControl)
        {
            case ShuttleNavControl standard:
                standard.UpdateState(scc);
                break;
            case AdvancedShuttleNavControl advanced:
                advanced.UpdateState(scc);
                break;
        }
    }

    private void ShowStandard()
    {
        TargetSidebar.Visible = false;
        SetAdvancedControlsVisibility(false);
        ClearTargets();
        SetRadarControl(EnsureStandardControl());
    }

    private void ShowAdvanced()
    {
        TargetSidebar.Visible = true;
        var control = EnsureAdvancedControl();
        SetRadarControl(control);
        SetAdvancedControlsVisibility(true);
        SyncEmissionSelector(control.IsActiveEmission);
        SyncModeSelector();
        SyncSectorCenter();
        UpdateSectorControlsVisibility();
        SyncBeamSpeed();
    }

    private ShuttleNavControl EnsureStandardControl()
    {
        return _standardControl ??= new ShuttleNavControl();
    }

    private AdvancedShuttleNavControl EnsureAdvancedControl()
    {
        if (_advancedControl != null)
            return _advancedControl;

        _advancedControl = new AdvancedShuttleNavControl();
        _advancedControl.TargetsUpdated += HandleTargetsUpdated;
        _advancedControl.LockedTargetChanged += HandleLockedTargetChanged;
        _advancedControl.ScanModeChanged += HandleScanModeChanged;
        _advancedControl.SectorCenterChanged += HandleSectorCenterChanged;
        _advancedControl.EmissionModeChanged += HandleEmissionChanged;
        return _advancedControl;
    }

    private void SetRadarControl(BaseShuttleControl control)
    {
        if (_activeControl == control)
            return;

        if (_activeControl != null && _activeControl.Parent == RadarHost)
            RadarHost.RemoveChild(_activeControl);

        if (control.Parent != null)
            control.Parent.RemoveChild(control);

        RadarHost.AddChild(control);
        _activeControl = control;
    }

    private void SetAdvancedControlsVisibility(bool visible)
    {
        EmissionLabel.Visible = visible;
        EmissionButtons.Visible = visible;
        ModeLabel.Visible = visible;
        ModeButtons.Visible = visible;
        BeamSpeedLabel.Visible = visible;
        BeamSpeedSlider.Visible = visible;
        BeamSpeedValue.Visible = visible;
        StatusSummaryLabel.Visible = visible;

        if (!visible)
        {
            SetSectorControlsVisible(false);
            StatusSummaryLabel.Text = " ";
        }
        else
        {
            UpdateStatusSummary();
        }
    }

    private void SetSectorControlsVisible(bool visible)
    {
        SectorCenterLabel.Visible = visible;
        SectorCenterSpinBox.Visible = visible;
        SectorCenterValue.Visible = visible;
    }

    private void UpdateSectorControlsVisibility()
    {
        if (_advancedControl == null || !ModeButtons.Visible)
        {
            SetSectorControlsVisible(false);
            return;
        }

        var visible = _advancedControl.ScanMode == RadarScanMode.Sector;
        SetSectorControlsVisible(visible);
        UpdateStatusSummary();
    }

    private void SyncModeSelector()
    {
        if (_advancedControl == null)
            return;

        _updatingMode = true;
        switch (_advancedControl.ScanMode)
        {
            case RadarScanMode.Sector:
                ModeSectorButton.Pressed = true;
                break;
            default:
                ModeOverviewButton.Pressed = true;
                break;
        }
        _updatingMode = false;
        UpdateStatusSummary();
    }

    private void SyncSectorCenter()
    {
        if (_advancedControl == null)
            return;

        var value = NormalizeDegrees(_advancedControl.SectorCenterDegrees);
        _updatingSectorCenter = true;
        SectorCenterSpinBox.OverrideValue(value);
        _updatingSectorCenter = false;
        UpdateSectorCenterValueLabel(value);
        UpdateStatusSummary();
    }

    private void SyncEmissionSelector(bool active)
    {
        _updatingEmission = true;
        if (active)
            EmissionActiveButton.Pressed = true;
        else
            EmissionPassiveButton.Pressed = true;
        _updatingEmission = false;
        UpdateStatusSummary();
    }

    private void UpdateSectorCenterValueLabel(float value)
    {
        SectorCenterValue.Text = Loc.GetString("advanced-radar-sector-center-value", ("value", $"{value:0}"));
    }

    private static int NormalizeDegrees(int value)
    {
        var normalized = value % 360;
        if (normalized < 0)
            normalized += 360;
        return normalized;
    }

    private static int NormalizeDegrees(float value)
    {
        return NormalizeDegrees((int)MathF.Round(value));
    }

    private void OnModeOverviewPressed(ButtonEventArgs args)
    {
        HandleModePressed(RadarScanMode.Overview);
    }

    private void OnModeSectorPressed(ButtonEventArgs args)
    {
        HandleModePressed(RadarScanMode.Sector);
    }

    private void HandleModePressed(RadarScanMode mode)
    {
        if (_updatingMode || _advancedControl == null)
            return;

        _advancedControl.SetScanMode(mode);
        UpdateSectorControlsVisibility();
        UpdateStatusSummary();
    }

    private void HandleScanModeChanged(RadarScanMode mode)
    {
        _updatingMode = true;
        switch (mode)
        {
            case RadarScanMode.Sector:
                ModeSectorButton.Pressed = true;
                break;
            default:
                ModeOverviewButton.Pressed = true;
                break;
        }
        _updatingMode = false;
        UpdateSectorControlsVisibility();
        UpdateStatusSummary();
    }

    private void OnEmissionActivePressed(ButtonEventArgs args)
    {
        HandleEmissionPressed(true);
    }

    private void OnEmissionPassivePressed(ButtonEventArgs args)
    {
        HandleEmissionPressed(false);
    }

    private void HandleEmissionPressed(bool active)
    {
        if (_updatingEmission)
            return;

        Interface?.SetActiveMode(active);
        UpdateStatusSummary();
    }

    private void HandleEmissionChanged(bool active)
    {
        _updatingEmission = true;
        if (active)
            EmissionActiveButton.Pressed = true;
        else
            EmissionPassiveButton.Pressed = true;
        _updatingEmission = false;
        UpdateStatusSummary();
    }

    private void OnSectorCenterChanged(ValueChangedEventArgs args)
    {
        var value = NormalizeDegrees(args.Value);

        if (value != args.Value)
        {
            _updatingSectorCenter = true;
            SectorCenterSpinBox.OverrideValue(value);
            _updatingSectorCenter = false;
        }

        UpdateSectorCenterValueLabel(value);

        if (_updatingSectorCenter || _advancedControl == null)
        {
            UpdateStatusSummary();
            return;
        }

        _advancedControl.SetSectorCenter(value);
        UpdateStatusSummary();
    }

    private void HandleSectorCenterChanged(float value)
    {
        var normalized = NormalizeDegrees(value);
        _updatingSectorCenter = true;
        SectorCenterSpinBox.OverrideValue(normalized);
        _updatingSectorCenter = false;
        UpdateSectorCenterValueLabel(normalized);
        UpdateStatusSummary();
    }

    private void HandleTargetsUpdated(IReadOnlyDictionary<EntityUid, AdvancedShuttleNavControl.TargetInfo> targets)
    {
        if (!ReferenceEquals(_advancedControl, _activeControl))
            return;

        _targetBuffer.Clear();
        foreach (var (uid, info) in targets)
        {
            _targetBuffer.Add((uid, info));
        }

        _targetBuffer.Sort((a, b) => a.Info.Distance.CompareTo(b.Info.Distance));

        var toRemove = new ValueList<EntityUid>();
        foreach (var uid in _targetItems.Keys)
        {
            if (!targets.ContainsKey(uid))
                toRemove.Add(uid);
        }

        for (var i = 0; i < toRemove.Count; i++)
        {
            _targetItems.Remove(toRemove[i]);
        }

        _itemBuffer.Clear();

        foreach (var (uid, info) in _targetBuffer)
        {
            if (!_targetItems.TryGetValue(uid, out var item))
            {
                item = new ItemList.Item(TargetList)
                {
                    Metadata = uid
                };

                _targetItems.Add(uid, item);
            }

            item.Text = Loc.GetString("advanced-radar-target-entry",
                ("distance", $"{info.Distance:0}"),
                ("name", info.DisplayName));

            item.TooltipText = Loc.GetString("advanced-radar-target-tooltip",
                ("type", info.TargetType),
                ("speed", $"{info.Speed:0.0}"),
                ("course", $"{info.CourseDegrees:0}"),
                ("bearing", $"{info.BearingDegrees:0}"));

            _itemBuffer.Add(item);
        }

        TargetList.SetItems(_itemBuffer, ItemComparer);

        foreach (var item in TargetList)
        {
            if (item.Metadata is EntityUid uid)
                _targetItems[uid] = item;
        }

        if (_advancedControl != null)
            HandleLockedTargetChanged(_advancedControl.LockedTarget);
    }

    private void HandleLockedTargetChanged(EntityUid? uid)
    {
        _handlingSelection = true;
        try
        {
            if (uid != null && _targetItems.TryGetValue(uid.Value, out var item))
            {
                item.Selected = true;
            }
            else
            {
                TargetList.ClearSelected();
            }
        }
        finally
        {
            _handlingSelection = false;
        }
    }

    private void OnTargetSelected(ItemList.ItemListSelectedEventArgs args)
    {
        if (_handlingSelection || _advancedControl == null)
            return;

        if (args.ItemIndex < 0 || args.ItemIndex >= TargetList.Count)
            return;

        var item = TargetList[args.ItemIndex];

        if (item.Metadata is not EntityUid uid)
            return;

        _handlingSelection = true;
        try
        {
            if (!_advancedControl.TryLockTarget(uid))
                item.Selected = false;
        }
        finally
        {
            _handlingSelection = false;
        }
    }

    private void OnTargetDeselected(ItemList.ItemListDeselectedEventArgs args)
    {
        if (_handlingSelection || _advancedControl == null)
            return;

        var hasSelection = false;
        foreach (var selected in TargetList.GetSelected())
        {
            hasSelection = true;
            break;
        }

        if (!hasSelection)
            _advancedControl.ClearLock();
    }

    private void ClearTargets()
    {
        _handlingSelection = true;
        try
        {
            TargetList.Clear();
            _targetItems.Clear();
            _itemBuffer.Clear();
            _targetBuffer.Clear();
        }
        finally
        {
            _handlingSelection = false;
        }
    }

    private void OnBeamSpeedChanged(RangeControl slider)
    {
        if (_updatingBeamSpeed)
            return;

        var value = slider.Value;
        UpdateBeamSpeedLabel(value);

        if (_advancedControl != null)
            _advancedControl.SweepDegreesPerSecond = value;
    }

    private void SyncBeamSpeed()
    {
        if (_advancedControl == null)
            return;

        var value = _advancedControl.SweepDegreesPerSecond;
        _updatingBeamSpeed = true;
        BeamSpeedSlider.SetValueWithoutEvent(value);
        _updatingBeamSpeed = false;
        UpdateBeamSpeedLabel(value);
    }

    private void UpdateBeamSpeedLabel(float value)
    {
        BeamSpeedValue.Text = Loc.GetString("advanced-radar-beam-speed-value", ("value", $"{value:0}"));
        UpdateStatusSummary();
    }

    private void UpdateStatusSummary()
    {
        var emissionText = EmissionActiveButton.Pressed
            ? Loc.GetString("advanced-radar-emission-active")
            : Loc.GetString("advanced-radar-emission-passive");

        var mode = _advancedControl?.ScanMode ?? RadarScanMode.Overview;
        var modeText = mode == RadarScanMode.Sector
            ? Loc.GetString("advanced-radar-mode-sector")
            : Loc.GetString("advanced-radar-mode-overview");

        var sectorText = mode == RadarScanMode.Sector
            ? Loc.GetString("advanced-radar-status-sector-value", ("value", $"{SectorCenterSpinBox.Value:0}"))
            : Loc.GetString("advanced-radar-status-sector-off");

        var sweepText = Loc.GetString("advanced-radar-beam-speed-value", ("value", $"{BeamSpeedSlider.Value:0}"));

        StatusSummaryLabel.Text = StatusSummaryLabel.Visible
            ? Loc.GetString("advanced-radar-status-summary",
                ("mode", modeText),
                ("emission", emissionText),
                ("sector", sectorText),
                ("sweep", sweepText))
            : StatusSummaryLabel.Text;
    }
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            TargetList.OnItemSelected -= OnTargetSelected;
            TargetList.OnItemDeselected -= OnTargetDeselected;
            BeamSpeedSlider.OnValueChanged -= OnBeamSpeedChanged;
            ModeOverviewButton.OnPressed -= OnModeOverviewPressed;
            ModeSectorButton.OnPressed -= OnModeSectorPressed;
            EmissionActiveButton.OnPressed -= OnEmissionActivePressed;
            EmissionPassiveButton.OnPressed -= OnEmissionPassivePressed;
            SectorCenterSpinBox.ValueChanged -= OnSectorCenterChanged;
            LinkEmitterButton.OnPressed -= OnLinkEmitterPressed;

            if (_advancedControl != null)
            {
                _advancedControl.TargetsUpdated -= HandleTargetsUpdated;
                _advancedControl.LockedTargetChanged -= HandleLockedTargetChanged;
                _advancedControl.ScanModeChanged -= HandleScanModeChanged;
                _advancedControl.SectorCenterChanged -= HandleSectorCenterChanged;
                _advancedControl.EmissionModeChanged -= HandleEmissionChanged;
            }

            ClearTargets();
        }

        base.Dispose(disposing);
    }

    private void OnLinkEmitterPressed(ButtonEventArgs obj)
    {
        Interface?.LinkEmitter();
    }
}
